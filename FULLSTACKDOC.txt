DATE:13.03.2024
====================================
FULL STACK JAVA
============================

MAVEN
=========================
MAVEN PROJECT BUILD TOOL
1.DOWNLOAD THE LIBARARIES OR JAR FILES
2.COMPILE THE SOURCE CODE
3.EXECUTE THE TEST CASES
4.PACKAGE INTO JAR/WAR FILE
PURPOSE OF MAVEN 
===========================
TO AUTOMATE PROJECT BUILDING PROCESS
MAVEN IS A OPEN SOUCE.IT IS A JAVA BASED
HOW TO USE MAVEN
=======================
TWO WAYS
====================
1.MANUALLY
2.IDE
TERMINOLOGY
==========================
1.ARCHIETYPE====TYPE OF PROJECT===QUICK START/WEB
2.GROUP ID===ORGANIZATION NAME===COM.AIEM
3.ARCHETYPE===NAME OF THE PROJECT
4.VERSION======SNAPSHOT   
               RELEASE
5.REPOSITORY
   THREE TYPES
================================
1.CENTRAL
2.LOCAL
3.REMOTE
6.POM.XML===PROJECT OBJECT MODEL
PROJECT CONFIGURATION RELATED INFORMATION
GOAL====BULDING PROCESS
=======================
CLEAN
COMPILE
TEST
PACKAGE


SPRING
==================================================================================
1.DESKTOP APPLICATION:CORE JAVA,AWT,SWING,SPRING=========================JAR FILE
2.WEB APPLICATION:SERVLET,JSP,HTML,CSS,JAVASCRIPT,SPRING=================WAR FILE
3.ENTERPRISE APPLICATION:EJB,SPRING=====================================EAR FILE(JAR+WAR)
DEFINATION
===============================
SPRING IS AN OPEN SOURCE LIGHT WEIGHT DEPENDENCY INJECTION BASED FRAMEWORK SOFTWARE TO DEVELOP JAVA/JEE
BASED ENTERPRISE APPLICATION
HEAVY WEIGHT
==============================
.java=====compile===.class====container===.java===.class==o/p
ex:jsp
LIGHT WEIGHT
================================
.java===compile===.class===container===.class===o/p
POJO CLASS==PLAIN OLD JAVA OBJECT
GETTER METHOD SETTER METHOD CONSTRUCTOR WILL BE THERE
XML/ANNOATION
FEATURES OF THE SPRING
===========================================
1.SPRING IS USED FOR DISTRIBUTED AND WEB APPLICATION
2.SPRING SUPPORT CONTAINER SYSTEM
============================================
SCAN THE CLASSES
CREATE OBEJCT
PROVIDE DATA TO THE OBJECT
LINK THE OBJECT
DESTROY THE OBJECT
===================================================================
INSTANCE VARIBALE IN JAVA
=======================================================
class Test
{
  private String cid;//instance variable
public void add(int x,int y)
{


}
IN CASE OF SPRING CLASS WE DECLAED ARE CALLED SPRINGBEAN
==============================================
SPRING BEAN===CLASS+RULES GIVEN BY SPRING
INSTANCE VARIABLE IN SPRING ARE CALLED DEPENDENCY

DEVELOPER
=======================
TYPES OF DEPENDENCY INJECTION
=============================
1.PRIMITITIVE TYPE
2.COLLECTION TYPES
3.REFERENCE TYPE
FRAMEWORK
=================================================================================
TECHNOLOGIES + DESIGN PATTERN
MESSAGE=====JMS
MAILING=====JAVAMAIL
DATABASE====JDBC API
DESIGN PATTERN
============================================
WELL APPROVED SOLUTION


RAD===RAPID APPLICATION DEVELOPMENT

TWO TYPES OF CONTAINER
=========================
1.BEANFACTORY=========XML
2.APPLICATION CONTEXT===XML JAVA ANNOTATION===ALSO CALLED INVERSION CONTROL(IOC)
MODULE OF SPRING
========================
SPRING CORE
SPRING JDBC
SPRING AOP
SPRING ORM
SPRING CONTEXT
SPRING WEB==============
SPRING MVC=============    SPRING WEB MVC
SPRING CORE 
===============================
SPRING CORE PROVIDES RULES FOR CREATING THE SPRING APPLICATION
RULES
========================
ALL INSTANCE VARIABLE ARE PRIVATE
GETTTER AND SETTER METHOD
CONSTRUCTOR
PARAMETERISED CONSTRUCTOR
USE TOSTRING(),HASHCODE(),EQUALS()
USE ANNOTATION

TYPES OF INJECTION
=======================
SETTER INJECTION
CONSTRUCTOR INJECTION
LOOKUP METHOD INJECTION
INTERFACE INJECTION

DATE:15.03.2024
============================================================================================================

DRIVER:

HIBERNATE
========================================================
PRACTICAL STEPS
===================
1.CREATE DATABASE IN MYSQL
2.CREATE A MAVEN PROJECT IN IDE(STS)
3.ADD LOMBOK AND HIBERNATE  AND MYSQL  DEPENDENCY IN POM.XML FILE
4.RIGHT CLICK ON PROJECT===GO TO PROPERTIES====JAVA BUILD PATH===CHECK THE JRE
   SRC/MAIN/RESOURCES WILL COME
5.PASTE  META-INF FOLDER IN SRC/MAIN/RESOURCES


CREATE TABLE STUDENT
-========================
ROLLNO===INT    SNAME===STRING



CREATE TABLE TEACHER
======================
TID===STRING  TNAME==STRING
DATE:16.03.2024
============================================================
HIBERNATE
=============================================================
@Entity========TABLE ACCORDING TO THE CLASS NAME
@Table(name=" ")===SPECIFITY THE CUSTOM TABLE NAME
@Id===============PRIMARY KEY
@Column=====FIX THE  COLUMN SIZE AS WELL AS CHANGE THE COLUMN NAME
@Temporal============IT USED FOR DATE FIELDS WHERE YOU CAN STORE DATE AS WELL AS BOTH DATE AND TIME
@GeneratedValue=======YOU CAN MAKE THE COLUMN IS AUTOGENERATED.COLUMN MUST BE INTEGER TYPE
nullable=false   ===========COLUMN  IS NOT NULL.SO THAT YOU CAN'T LEFT BLANK TO THE FIELDS
=================================================================================
MAPPING OF TABLES
=======================================
1.ONE TO ONE MAPPING
2.ONE TO MANY MAPPING
3.MANY TO ONE MAPPING
4.MANY TO MANY MAPPING
====================================================================================
CRUD OPERATION
===============================
INSERT UPDATE DELETE FETCH
==========================================================================================

import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
public class Product {
	@Id
	@Column(length = 10)
private String pid;
	@Column(length = 25,nullable = false)
private String pname;
private Integer pqty;
private Double price;
}

FETCH DATA FROM DATABASE
====================================
1.HQL==HIBERNATE QUERY LANGUAGE======================KNOWS THE CLASS NAME NOT THE TABLE NAME
2.JPQL===JAVA PERSISTANCE QUERY LANGUAGE=============KNOWS THE CLASS NAME NOT THE TABLE NAME
3.NATIVE SQL=====NORMAL SQL========================IT KNOWS ONLY TABLE NAME

HQL
=================================
FROM Product;
JPQL
==============
Select P from Product p;
NATIVE SQL
======================
select * from product;

System.out.println("DELETE DATA====================");
 Product pds=em.find(Product.class,"P6");//finding the p6 is available or not
 if(pds!=null)
 {
	 em.remove(pds);
 }
 System.out.println("FETCH DATA===============");
 String hql="from Product";
 Query query=em.createQuery(hql);
 List<Product> plist=query.getResultList();
 plist.stream().forEach(System.out::println);
tx.commit();//saving data into database
emf.close();






   






